// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories.Concrete.EFCore.Contexts;

#nullable disable

namespace WebApi.Migrations
{
    [DbContext(typeof(MovieContext))]
    [Migration("20230920234238_CreateTrigger_Prevent_Duplicate_Awards")]
    partial class CreateTrigger_Prevent_Duplicate_Awards
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GenrePerson", b =>
                {
                    b.Property<int>("GenresId")
                        .HasColumnType("int");

                    b.Property<int>("PersonsId")
                        .HasColumnType("int");

                    b.HasKey("GenresId", "PersonsId");

                    b.HasIndex("PersonsId");

                    b.ToTable("GenrePerson");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Actor", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("AlternativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Award", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("AwardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("Date", "AwardTypeId");

                    b.HasIndex("AwardTypeId");

                    b.HasIndex("MovieId");

                    b.ToTable("Awards", t =>
                        {
                            t.HasTrigger("TRG_PreventDuplicateAwards");
                        });
                });

            modelBuilder.Entity("Models.Concrete.Entities.AwardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AwardTypes");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Director", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("AlternativeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Drama"
                        });
                });

            modelBuilder.Entity("Models.Concrete.Entities.Junctions.MovieGenre", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Junctions.MovieLanguage", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("MovieLanguages");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Junctions.MovieLocation", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("MovieLocations");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Junctions.MoviePerson", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("MoviePerson");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationAsMinute")
                        .HasColumnType("int");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("date");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Movies", t =>
                        {
                            t.HasTrigger("TRG_Movies_LastModified_After_Update_GetDate");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DurationAsMinute = 119,
                            IsReleased = true,
                            ReleaseDate = new DateTime(1982, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Thing"
                        },
                        new
                        {
                            Id = 2,
                            DurationAsMinute = 120,
                            IsReleased = true,
                            ReleaseDate = new DateTime(1941, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Citizen Kane"
                        },
                        new
                        {
                            Id = 3,
                            DurationAsMinute = 99,
                            IsReleased = true,
                            ReleaseDate = new DateTime(1981, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Escape From New York"
                        },
                        new
                        {
                            Id = 4,
                            DurationAsMinute = 207,
                            IsReleased = true,
                            ReleaseDate = new DateTime(1954, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Seven Samurai"
                        },
                        new
                        {
                            Id = 5,
                            DurationAsMinute = 100,
                            IsReleased = true,
                            ReleaseDate = new DateTime(1998, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Dark City"
                        });
                });

            modelBuilder.Entity("Models.Concrete.Entities.MovieDetail", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Revenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MovieId");

                    b.ToTable("MovieDetails");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("GenrePerson", b =>
                {
                    b.HasOne("Models.Concrete.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Concrete.Entities.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Concrete.Entities.Actor", b =>
                {
                    b.HasOne("Models.Concrete.Entities.Person", "Person")
                        .WithOne("Actor")
                        .HasForeignKey("Models.Concrete.Entities.Actor", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Award", b =>
                {
                    b.HasOne("Models.Concrete.Entities.AwardType", "AwardType")
                        .WithMany("Awards")
                        .HasForeignKey("AwardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Concrete.Entities.Movie", "Movie")
                        .WithMany("Awards")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwardType");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Director", b =>
                {
                    b.HasOne("Models.Concrete.Entities.Person", "Person")
                        .WithOne("Director")
                        .HasForeignKey("Models.Concrete.Entities.Director", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Junctions.MovieGenre", b =>
                {
                    b.HasOne("Models.Concrete.Entities.Genre", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Concrete.Entities.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Junctions.MovieLanguage", b =>
                {
                    b.HasOne("Models.Concrete.Entities.Language", "Language")
                        .WithMany("Movies")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Concrete.Entities.Movie", "Movie")
                        .WithMany("Languages")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Junctions.MovieLocation", b =>
                {
                    b.HasOne("Models.Concrete.Entities.Location", "Location")
                        .WithMany("Movies")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Concrete.Entities.Movie", "Movie")
                        .WithMany("Locations")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Junctions.MoviePerson", b =>
                {
                    b.HasOne("Models.Concrete.Entities.Movie", "Movie")
                        .WithMany("Crew")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Concrete.Entities.Person", "Person")
                        .WithMany("Movies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Models.Concrete.Entities.MovieDetail", b =>
                {
                    b.HasOne("Models.Concrete.Entities.Movie", "Movie")
                        .WithOne("MovieDetail")
                        .HasForeignKey("Models.Concrete.Entities.MovieDetail", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Models.Concrete.Entities.AwardType", b =>
                {
                    b.Navigation("Awards");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Language", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Location", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Models.Concrete.Entities.Movie", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Crew");

                    b.Navigation("Genres");

                    b.Navigation("Languages");

                    b.Navigation("Locations");

                    b.Navigation("MovieDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Concrete.Entities.Person", b =>
                {
                    b.Navigation("Actor");

                    b.Navigation("Director");

                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
